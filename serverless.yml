service:
  name: pdp-app

package:
  individually: true

plugins:
  - serverless-webpack
  - serverless-offline

provider:
  name: aws
  runtime: nodejs8.10
  region: ${opt:region, 'eu-west-1'}
  stage: ${opt:stage, 'production'}
  timeout: 60
  vpc:
    securityGroupIds:
      - sg-00e165ca294f5d8d1
    subnetIds:
      - subnet-058800fc8329b09e6
      - subnet-06c5f05352695b97c
      - subnet-06312c36d5b8830a7
  environment:
    STAGE: ${self:provider.stage}
    NODE_ENV: lambda
    TYPEORM_CONNECTION: ${env:TYPEORM_CONNECTION}
    TYPEORM_DATABASE: ${env:TYPEORM_DATABASE}
    TYPEORM_HOST: ${env:TYPEORM_HOST}
    TYPEORM_LOGGING: ${env:TYPEORM_LOGGING}
    TYPEORM_MAX_QUERY_EXECUTION_TIME: 60000
    TYPEORM_PASSWORD: ${env:TYPEORM_PASSWORD}
    TYPEORM_PORT: ${env:TYPEORM_PORT}
    TYPEORM_USERNAME: ${env:TYPEORM_USERNAME}

custom:
  webpack:
    includeModules:
      forceInclude:
        - mysql

functions:
  tasks-get-all:
    events:
      - http:
          method: get
          path: api/v1/tasks
    handler: src/lambda.handler

  tasks-get-one:
    events:
      - http:
          method: get
          path: api/v1/tasks/{id}
    handler: src/lambda.handler

  tasks-patch:
    events:
      - http:
          method: patch
          path: api/v1/tasks
    handler: src/lambda.handler

  tasks-post:
    events:
      - http:
          method: post
          path: api/v1/tasks
    handler: src/lambda.handler

  tasks-delete:
    events:
      - http:
          method: delete
          path: api/v1/tasks
    handler: src/lambda.handler
