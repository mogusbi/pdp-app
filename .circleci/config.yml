version: 2

jobs:
  init:
    docker:
      - image: circleci/node:8.10.0
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - pdp-dependencies-{{ checksum "package.json" }}
            - pdp-dependencies-
      - run:
          command: npm i
          name: Install dependencies
      - save_cache:
          key: pdp-dependencies-{{ checksum "package.json" }}
          paths:
            - node_modules
      - run:
          command: npm run lint
          name: Lint code

  unit-test:
    docker:
      - image: circleci/node:8.10.0
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - pdp-dependencies-{{ checksum "package.json" }}
            - pdp-dependencies-
      - run:
          command: npm run test
          name: Unit tests

  integration-test:
    docker:
      - image: circleci/node:8.10.0
      - image: circleci/mysql:5.6
        environment:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_USER: sage
          MYSQL_PASSWORD: password
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - pdp-dependencies-{{ checksum "package.json" }}
            - pdp-dependencies-
      - run:
          command: |
            sudo apt-get update
            sudo apt-get install -y mysql-client
          name: Install MySQL client
      - run:
          command: |
            mysql -h 127.0.0.1 -u root -ppassword < setup/mysql/init-test-db.sql
          name: Set up database
      - run:
          command: npm run e2e
          name: Integration tests

  build-container:
    docker:
      - image: circleci/node:8.10.0
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - pdp-dependencies-{{ checksum "package.json" }}
            - pdp-dependencies-
      - run:
          command: npm run build
          name: Build application
      - setup_remote_docker
      - run:
          command: |
            echo 'export FULL_CONTAINER_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}:${CIRCLE_SHA1}"' >> $BASH_ENV
          name: Set convenience environment variables
      - run:
          command: docker build -t $FULL_CONTAINER_NAME .
          name: Build container
      - run:
          command: |
            mkdir containers
            docker save -o containers/app.tar $FULL_CONTAINER_NAME
          name: Archive container
      - persist_to_workspace:
          root: .
          paths:
            - containers

  ecr-deploy:
    docker:
      - image: circleci/python:3.6.1
    environment:
      AWS_DEFAULT_OUTPUT: json
    working_directory: ~/repo
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      - setup_remote_docker
      - restore_cache:
          keys:
            - pdp-aws-{{ checksum "requirements.txt" }}
            - pdp-aws-
      - run:
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
          name: Install AWS CLI
      - save_cache:
          key: pdp-aws-{{ checksum "requirements.txt" }}
          paths:
            - venv
      - run:
          command: |
            docker load --input containers/app.tar
          name: Load container
      - run:
          command: |
            . venv/bin/activate
            eval $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_REPOSITORY_NAME:$CIRCLE_SHA1
          name: Push to ECR

  lambda-deploy-qa:
    docker:
      - image: circleci/node:8.10.0
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - pdp-dependencies-{{ checksum "package.json" }}
            - pdp-dependencies-
      - run:
          command: npm run serverless deploy -- --verbose --stage qa
          name: Deploy to AWS

  lambda-deploy-staging:
    docker:
      - image: circleci/node:8.10.0
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - pdp-dependencies-{{ checksum "package.json" }}
            - pdp-dependencies-
      - run:
          command: npm run serverless deploy -- --verbose --stage staging
          name: Deploy to AWS

  lambda-deploy-production:
    docker:
      - image: circleci/node:8.10.0
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - pdp-dependencies-{{ checksum "package.json" }}
            - pdp-dependencies-
      - run:
          command: npm run serverless deploy -- --verbose --stage production
          name: Deploy to AWS

workflows:
  version: 2

  build-deploy:
    jobs:
      - init
      - unit-test:
          requires:
            - init
      - integration-test:
          requires:
            - init
      - lambda-deploy-qa:
          filters:
            branches:
              only:
                - lambda
                - master
          requires:
            - unit-test
            - integration-test
      - lambda-deploy-staging:
          filters:
            branches:
              only:
                - master
          requires:
            - lambda-deploy-qa
          type: approval
      - lambda-deploy-production:
          requires:
            - lambda-deploy-staging
          type: approval
      - build-container:
          filters:
            branches:
              only:
                - docker
                - master
          requires:
            - unit-test
            - integration-test
      - ecr-deploy:
          requires:
            - build-container
